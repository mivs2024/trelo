// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  workInterval    Int?              @default(50)  @map("work_interval")
  breakInterval   Int?              @default(10)  @map("break_interval")
  intervalsCount  Int?              @default(7)  @map("intervals_count")
  tasks           Task[]
  timeBlocks       TimeBlock[]
  pomodoroSessions PomodoroSession[]

  @@map("user")
}

enum Priority {
  low
  medium
  high
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String
  priority    Priority?
  isCompleted Boolean   @default(false) @map("is_completed")

  user User @relation(fields: [userId], references: [id])

  userId Int @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name     String
  color    Priority?
  duration Int       @default(1)

  user User @relation(fields: [userId], references: [id])

  userId Int @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  isCompleted Boolean @default(false) @map("is_completed")

  user User @relation(fields: [userId], references: [id])

  userId        Int             @map("user_id")
  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  totalSeconds Int  @map("total_seconds")
  isCompleted  Boolean @default(false) @map("is_completed")

  pomodoroSession PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)

  pomodoroSessionId Int @map(" pomodoro_session_id")

  @@map("pomodoro_round")
}
